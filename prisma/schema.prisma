generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Lead {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Customer Info
  name           String
  email          String
  phone          String
  alternatePhone String?
  address        String?
  city           String?
  state          String?
  zip            String?
  rating         Int?

  // Lead Info
  vehicleDate  DateTime?
  vehicleName  String?
  vehicleModel String?

  LeadStatus LeadStatus[]
  LeadFeedback LeadFeedback[]

  companyId String?  @db.ObjectId
  Company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([companyId])
}

enum CallStatus {
  BUSY
  PENDING
  SUCCESS
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model LeadStatus {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?

  callStatus    CallStatus
  paymentStatus PaymentStatus

  leadId String? @db.ObjectId
  Lead   Lead?   @relation(fields: [leadId], references: [id], onDelete: Cascade)

  deptId String? @db.ObjectId
  Dept   Dept?   @relation(fields: [deptId], references: [id])

  assignedToId String? @db.ObjectId
  assignedTo   Member? @relation(fields: [assignedToId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([assignedToId])
}

model LeadFeedback {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  deptId String? @db.ObjectId
  dept   Dept?   @relation(fields: [deptId], references: [id])

  leadId String? @db.ObjectId @unique
  lead   Lead?   @relation(fields: [leadId], references: [id])

  feedback Json[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdminDept {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name   String
  imgURL String?

  Dept       Dept[]
  deptFields DeptField[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Dept {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  deptFieldId String    @db.ObjectId
  deptField   AdminDept @relation(fields: [deptFieldId], references: [id], onDelete: Cascade)

  deptManagerId String

  companyId String?  @db.ObjectId
  Company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  leadStatus LeadStatus[]
  members    Member[]

  LeadFeedback LeadFeedback[] // All Lead Feedbacks

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([companyId])
}

model DeptField {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  fieldType FieldType
  value     Json?

  adminDeptId String?    @db.ObjectId
  AdminDept   AdminDept? @relation(fields: [adminDeptId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([adminDeptId])
}

enum FieldType {
  INPUT
  TEXTAREA
  RADIO
  CHECKBOX
  SELECT
}

model Company {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  rootId           String
  companyManagerId String
  name             String
  imgURL           String?
  email            String
  phone            String

  members Member[] @relation("CompanyMembers")
  Depts   Dept[]
  Leads   Lead[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([rootId])
  @@index([companyManagerId])
  @@index([email])
}

model Role {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  Members Member[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Member {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  email    String  @unique
  password String
  name     String
  imgURL   String?
  phone    String

  deptId String? @db.ObjectId
  Dept   Dept?   @relation(fields: [deptId], references: [id], onDelete: Cascade)

  roleId String @db.ObjectId
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  companyId String?  @db.ObjectId
  Company   Company? @relation(fields: [companyId], references: [id], name: "CompanyMembers", onDelete: Cascade)

  LeadStatuses LeadStatus[] // Assigned Lead Statuses

  sessionToken String? // Device Login Token at a time

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([deptId])
  @@index([roleId])
  @@index([companyId])
}
